//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Map"",
            ""id"": ""52f82782-6308-461b-8ec2-5eaf426a83c8"",
            ""actions"": [
                {
                    ""name"": ""FirstFinger"",
                    ""type"": ""Value"",
                    ""id"": ""a7fc2a11-ad0e-435d-9362-05ef6720631a"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondFinger"",
                    ""type"": ""Value"",
                    ""id"": ""5373e9d5-ade8-4694-9418-6cb602f197fb"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32e28dad-f89a-4f35-a285-3a1bafa4a04b"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobiles"",
                    ""action"": ""FirstFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da827987-4d89-4864-8d2d-8256f2c01a29"",
                    ""path"": ""<Touchscreen>/touch1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobiles"",
                    ""action"": ""SecondFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobiles"",
            ""bindingGroup"": ""Mobiles"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_FirstFinger = m_Map.FindAction("FirstFinger", throwIfNotFound: true);
        m_Map_SecondFinger = m_Map.FindAction("SecondFinger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map
    private readonly InputActionMap m_Map;
    private List<IMapActions> m_MapActionsCallbackInterfaces = new List<IMapActions>();
    private readonly InputAction m_Map_FirstFinger;
    private readonly InputAction m_Map_SecondFinger;
    public struct MapActions
    {
        private @PlayerInputs m_Wrapper;
        public MapActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstFinger => m_Wrapper.m_Map_FirstFinger;
        public InputAction @SecondFinger => m_Wrapper.m_Map_SecondFinger;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void AddCallbacks(IMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsCallbackInterfaces.Add(instance);
            @FirstFinger.started += instance.OnFirstFinger;
            @FirstFinger.performed += instance.OnFirstFinger;
            @FirstFinger.canceled += instance.OnFirstFinger;
            @SecondFinger.started += instance.OnSecondFinger;
            @SecondFinger.performed += instance.OnSecondFinger;
            @SecondFinger.canceled += instance.OnSecondFinger;
        }

        private void UnregisterCallbacks(IMapActions instance)
        {
            @FirstFinger.started -= instance.OnFirstFinger;
            @FirstFinger.performed -= instance.OnFirstFinger;
            @FirstFinger.canceled -= instance.OnFirstFinger;
            @SecondFinger.started -= instance.OnSecondFinger;
            @SecondFinger.performed -= instance.OnSecondFinger;
            @SecondFinger.canceled -= instance.OnSecondFinger;
        }

        public void RemoveCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActions @Map => new MapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_MobilesSchemeIndex = -1;
    public InputControlScheme MobilesScheme
    {
        get
        {
            if (m_MobilesSchemeIndex == -1) m_MobilesSchemeIndex = asset.FindControlSchemeIndex("Mobiles");
            return asset.controlSchemes[m_MobilesSchemeIndex];
        }
    }
    public interface IMapActions
    {
        void OnFirstFinger(InputAction.CallbackContext context);
        void OnSecondFinger(InputAction.CallbackContext context);
    }
}
